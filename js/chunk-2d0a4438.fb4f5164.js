(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0a4438"],{"0662":function(e,o,t){"use strict";t.r(o);var n=function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("div",{directives:[{name:"t9n",rawName:"v-t9n.deep",value:"docs",expression:"'docs'",modifiers:{deep:!0}}],staticClass:"sockets"},[t("h1",[e._v("Сокеты")]),t("p",[e._v("Сокеты используются для определения того, какие входы и выходы могут быть подключены между собой. \nОни отвечают за тип данных, которые могут быть переданы с одного узла в другой.")]),t("p",[e._v("Прежде всего, вы должны объявить все сокеты, которые будут использоваться в редакторе.")]),t("Code",{attrs:{source:"sockets"}}),t("p",[e._v("Переданый параметр должен быть уникальным. Согдасно нему будет создан CSS класс в формате kebb-case, к которому вы можете применить стили.")]),t("Code",{attrs:{lang:"css",source:"socketCSS"}}),t("p",[e._v(" В результате вы можете подключить только входы и выходы с одинаковыми разъемами. \nХотя могут быть ситуации, когда нужно подключать разные сокеты. Для этого есть метод `combineWith`:")]),t("Code",{attrs:{source:"combineSocket"}}),t("p",[e._v("Теперь вы можете подключить `numSocket` к `anyTypeSocket`, но не наоборот")])],1)},c=[],s=t("2877"),i=function(e){e.options.code||(e.options.code={}),e.options.code["sockets"]="const numSocket = new Rete.Socket('Number');\nconst strSocket = new Rete.Socket('String');"},p=i,u=function(e){e.options.code||(e.options.code={}),e.options.code["socketCSS"]=".socket.number {\n  background: #96b38a\n}"},a=u,d=function(e){e.options.code||(e.options.code={}),e.options.code["combineSocket"]="const anyTypeSocket = new Rete.Socket('Any type');\nnumSocket.combineWith(anyTypeSocket);"},k=d,r={},S=Object(s["a"])(r,n,c,!1,null,null,null);"function"===typeof p&&p(S),"function"===typeof a&&a(S),"function"===typeof k&&k(S);o["default"]=S.exports}}]);